cmake_minimum_required(VERSION 3.22.1)
project(StockWidget)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

add_compile_options(-Wall)


#GLFW
add_subdirectory(libs/glfw)
find_package(OpenGL REQUIRED)



#Libcurl
set(BUILD_SHARED_LIBS OFF)
set(HTTP_ONLY ON CACHE BOOL "")
set(CURL_USE_LIBPSL OFF CACHE BOOL "Don't use libpsl")
add_subdirectory(libs/curl)


# === Create the library ===
# This will compile all the class cpp files into one static library
file(GLOB LIB_SOURCES "src/*.cpp")
list(REMOVE_ITEM LIB_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp")


# === CRYPTOPP ===
# Gather all cpp files
file(GLOB CRYPTOPP_ALL_SRC libs/cryptopp/*.cpp)


#REMOVING PROBLEM FILES
file(GLOB CRYPTOPP_SIMD_SRC libs/cryptopp/*_simd.cpp)
file(GLOB CRYPTOPP_AVX_SRC libs/cryptopp/*_avx.cpp)
file(GLOB CRYPTOPP_SSE_SRC libs/cryptopp/*_sse.cpp)
list(REMOVE_ITEM CRYPTOPP_ALL_SRC ${CRYPTOPP_SIMD_SRC})
list(REMOVE_ITEM CRYPTOPP_ALL_SRC ${CRYPTOPP_AVX_SRC})
list(REMOVE_ITEM CRYPTOPP_ALL_SRC ${CRYPTOPP_SSE_SRC})


# Define the three important files (must come first)
set(CRYPTOPP_CORE_SRC
    libs/cryptopp/cryptlib.cpp
    libs/cryptopp/cpu.cpp
    libs/cryptopp/integer.cpp
)

# Remove the core files from the full list to avoid duplicates
list(REMOVE_ITEM CRYPTOPP_ALL_SRC ${CRYPTOPP_CORE_SRC})

# Put them at the front
set(CRYPTOPP_SOURCES ${CRYPTOPP_CORE_SRC} ${CRYPTOPP_ALL_SRC})

## Remove SIMD-accelerated source files known to cause build issues
list(REMOVE_ITEM CRYPTOPP_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/libs/cryptopp/scrypt.cpp
)


# === IMGUI ===
file(GLOB ROOT_H libs/imgui/*.h)
file(GLOB ROOT_CPP libs/imgui/*.cpp)
set(IMGUI_ROOT_SOURCES ${ROOT_H} ${ROOT_CPP})

set(IMGUI_ADDITIONAL_SOURCES
	libs/imgui/backends/imgui_impl_glfw.cpp
    libs/imgui/backends/imgui_impl_opengl3.cpp

)

#ADDING IMPLOT
file(GLOB IMPLOT_H libs/implot/*.h)
file(GLOB IMPLOT_CPP libs/implot/*.cpp)
set(IMPLOT_ADDON ${IMPLOT_H} ${IMPLOT_CPP})


set(ALL_IMGUI_SOURCES ${IMGUI_ROOT_SOURCES} ${IMGUI_ADDITIONAL_SOURCES} ${IMPLOT_ADDON})
#foreach(file ${ALL_IMGUI_SOURCE})
#    message(STATUS "IMGUI FILE: ${file}")
#endforeach()



add_library(stocklib ${LIB_SOURCES} ${ALL_IMGUI_SOURCES})


# Define the library
add_library(cryptopp STATIC ${CRYPTOPP_SOURCES})
#JSONCPP
add_library(jsoncpp STATIC
    libs/jsoncpp/src/lib_json/json_reader.cpp
    libs/jsoncpp/src/lib_json/json_value.cpp
    libs/jsoncpp/src/lib_json/json_writer.cpp
)

# Specify where the library looks for headers
target_include_directories(stocklib PUBLIC 
		include
		libs/cryptopp
		libs/jsoncpp/include
		libs/imgui
		libs/imgui/backends
	 	libs/glfw/include
	 	libs/implot
)


target_include_directories(jsoncpp PUBLIC libs/jsoncpp/include)
target_include_directories(cryptopp PUBLIC libs/cryptopp)

target_compile_definitions(cryptopp PRIVATE CRYPTOPP_DISABLE_ASM)

# === Create the executable ===
add_executable(StockWidget src/main.cpp)


target_include_directories(StockWidget PRIVATE ${CMAKE_SOURCE_DIR}libs/jsoncpp/include)
target_include_directories(StockWidget PRIVATE libs/curl/include)



target_link_libraries(StockWidget
    PRIVATE
    stocklib   
    stdc++fs
	jsoncpp
	cryptopp 
    libcurl
    glfw
    GL
    dl
    pthread
    OpenGL::GL
    
    
)


